"""
Unit tests for audio encoder module.

PRODUCTION: Tests MERTEncoder only (no fallback encoders).
"""

import torch
import pytest

from src.models.audio_encoder import MERTEncoder


# ==================== MERTEncoder Tests ====================


@pytest.mark.slow
def test_mert_encoder_init():
    """Test MERTEncoder initialization (requires internet)."""
    try:
        encoder = MERTEncoder(
            model_name="m-a-p/MERT-v1-95M",
            freeze_backbone=False,
            gradient_checkpointing=True,
        )

        assert encoder.model_name == "m-a-p/MERT-v1-95M"
        assert encoder.hidden_size == 768  # MERT-95M hidden size
        assert encoder.get_output_dim() == 768
        assert not encoder.freeze_backbone

    except RuntimeError as e:
        pytest.skip(f"MERT model not available: {e}")


@pytest.mark.slow
def test_mert_encoder_forward():
    """Test MERTEncoder forward pass (requires internet and model download)."""
    try:
        encoder = MERTEncoder(model_name="m-a-p/MERT-v1-95M")

        batch_size = 2
        num_samples = 48000  # 2 seconds at 24kHz

        audio = torch.randn(batch_size, num_samples)

        # Forward pass
        embeddings, hidden_states = encoder(audio)

        # Check shapes
        assert embeddings.shape[0] == batch_size
        assert embeddings.shape[2] == 768
        assert hidden_states is None  # Not requested

        # Forward pass with hidden states
        embeddings, hidden_states = encoder(audio, output_hidden_states=True)
        assert hidden_states is not None

    except (RuntimeError, OSError) as e:
        pytest.skip(f"MERT model not available: {e}")


@pytest.mark.slow
def test_mert_encoder_freeze():
    """Test MERTEncoder freeze/unfreeze functionality."""
    try:
        encoder = MERTEncoder(freeze_backbone=False)

        # Initially unfrozen
        assert encoder.freeze_backbone is False
        frozen_params = [p for p in encoder.model.parameters() if not p.requires_grad]
        assert len(frozen_params) == 0

        # Freeze
        encoder.freeze()
        assert encoder.freeze_backbone is True
        frozen_params = [p for p in encoder.model.parameters() if not p.requires_grad]
        total_params = list(encoder.model.parameters())
        assert len(frozen_params) == len(total_params)

        # Unfreeze
        encoder.unfreeze()
        assert encoder.freeze_backbone is False
        frozen_params = [p for p in encoder.model.parameters() if not p.requires_grad]
        assert len(frozen_params) == 0

    except (RuntimeError, OSError) as e:
        pytest.skip(f"MERT model not available: {e}")


@pytest.mark.slow
def test_mert_encoder_with_attention_mask():
    """Test MERTEncoder with custom attention mask."""
    try:
        encoder = MERTEncoder()

        batch_size = 2
        num_samples = 48000

        audio = torch.randn(batch_size, num_samples)
        # Note: Attention mask will be generated by processor,
        # so we just pass audio and let it handle masking
        embeddings, _ = encoder(audio)

        assert embeddings.shape[0] == batch_size
        assert embeddings.shape[2] == 768

    except (RuntimeError, OSError) as e:
        pytest.skip(f"MERT model not available: {e}")


# ==================== Integration Tests ====================


@pytest.mark.slow
def test_mert_encoder_consistency():
    """Test that MERT encoder produces consistent shapes across calls."""
    try:
        encoder = MERTEncoder(model_name="m-a-p/MERT-v1-95M")
        encoder.eval()

        for _ in range(2):
            audio = torch.randn(2, 48000)
            embeddings, _ = encoder(audio)

            assert embeddings.shape[0] == 2
            assert embeddings.shape[2] == 768

    except (RuntimeError, OSError) as e:
        pytest.skip(f"MERT model not available: {e}")


@pytest.mark.slow
def test_mert_encoder_state_dict():
    """Test saving and loading MERT encoder state."""
    try:
        encoder1 = MERTEncoder(model_name="m-a-p/MERT-v1-95M")

        # Save state
        state_dict = encoder1.state_dict()

        # Create new encoder and load state
        encoder2 = MERTEncoder(model_name="m-a-p/MERT-v1-95M")
        encoder2.load_state_dict(state_dict)

        # Verify state was loaded
        assert encoder2.freeze_backbone == encoder1.freeze_backbone

    except (RuntimeError, OSError) as e:
        pytest.skip(f"MERT model not available: {e}")
